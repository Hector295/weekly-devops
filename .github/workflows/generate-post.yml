name: Generar art√≠culo semanal

on:
  schedule:
    - cron: '0 8 * * 1'  # Cada lunes a las 8:00 AM UTC
  workflow_dispatch:     # Para probar manualmente

jobs:
  generate-post:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install requests
        run: |
          pip install requests

      - name: Generate article with Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Llamar a Gemini para obtener t√≠tulo y contenido
          RESPONSE=$(curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "Sugiere un tema t√©cnico sobre Docker, DevOps o Linux en espa√±ol. Solo el t√≠tulo."
                }]
              }],
              "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 100
              }
            }')

          TITLE=$(echo "$RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['candidates'][0]['content']['parts'][0]['text'].strip().replace('#', ''))")

          # Verificar duplicados
          if [ -f "_data/topics-used.json" ]; then
            if grep -q "$TITLE" "_data/topics-used.json"; then
              echo "Tema duplicado. Saliendo."
              exit 0
            fi
          fi

          # Generar contenido completo
          FULL_RESPONSE=$(curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [{
                "parts": [{
                  "text": "Escribe un art√≠culo t√©cnico en espa√±ol sobre: '"$TITLE"'. Incluye requisitos, c√≥digo, errores comunes, soluci√≥n. Formato Markdown."
                }]
              }],
              "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 1500
              }
            }')

          CONTENT=$(echo "$FULL_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['candidates'][0]['content']['parts'][0]['text'].strip())")

          # Crear archivo con front matter
          DATE=$(date +"%Y-%m-%d")
          FILENAME="_posts/${DATE}-articulo-tecnico.md"
          echo "---" > "$FILENAME"
          echo "title: $TITLE" >> "$FILENAME"
          echo "date: $(date +"%Y-%m-%d %H:%M:%S")" >> "$FILENAME"
          echo "---" >> "$FILENAME"
          echo "" >> "$FILENAME"
          echo "$CONTENT" >> "$FILENAME"

          # Actualizar topics-used.json
          jq --arg t "$TITLE" --arg d "$DATE" \
            '. += [{"title": $t, "date": $d}]' \
            _data/topics-used.json > tmp.$$.json && mv tmp.$$.json _data/topics-used.json || echo '[{"title": "'"$TITLE"'", "date": "'"$DATE"'"}]' > _data/topics-used.json
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: Create Pull Request
        run: |
          BRANCH_NAME="pr/semanal-$(date +%Y-%m-%d)"
          echo "Creando rama: $BRANCH_NAME"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git checkout -b "$BRANCH_NAME"
          git add .
          git commit -m "Generar art√≠culo semanal con Gemini" || echo "No changes to commit"

          git push "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" "$BRANCH_NAME"

          gh pr create \
            --title "üì∞ Nuevo art√≠culo t√©cnico generado autom√°ticamente" \
            --body "Este art√≠culo fue generado por IA (Gemini)" \
            --assignee "Hector295" \ 
            --base "main" \
            --head "$BRANCH_NAME"